#!/bin/bash

# Guessing json schema
#
# usage: $0 [file.json]...
# multiple json handled as an array of jsons:
#   `cat "*.json" | $0` same as `$0 "*.json"`
# generalizing made by multiple instances, what can happen in one tree's recursion too
# output columns:
#   1.a ! or ?: mandatory or optional
#   1.b *: point of guessed(!) recursion
#   2. count: number of occurrences of a path
#   3. type: type[,type] | {null, string, boolean, number, array, object}
#   4. path: path (array indices suppresses)
# TODO
#   - aaargh (there has to be a better way)
#   - instead of mandatory/optional: matrix of a vs b marking if a is present then b too, a includes the node itself so m/o are represented
#   - primitive types of array elements (eg.: [str,obj,num...] )
#   - detect subtypes (date, int, float, enums(aka. repeating values), ...)

function main() {
    traverse "$@" |\
    arrayCollapsing |\
    pathCollapsing |\
    pathCount |\
    sortByPathname |\
    markRecursions
}

# produces lines of every values as their full paths and types, (values are "colapsing" to type)
# eg. input: {"children":[{"children":[{"foo":7},{"foo":8,"bar":9}]}]}
# eg. output: "0.children.0.children.0.foo number"
function traverse () {
    jq -rs 'paths as $path  | [
        ( [ $path[] | tostring ] | join(".") ),
        ( getpath($path) | type )
    ] | join(" ")' "$@"
}

# values af array indices (eg. ".0") collapsin to just "[]"
# eg. output: "[].children[].children[].foo number"
function arrayCollapsing() { awk '{$0 = gensub("(^|\\.)[0-9]+", "[]", "g")} 1'; }

# consecutive same array names collapsing in a hope that it is a real recursion
# eg. output: "[].children[].foo number"
function pathCollapsing() { sed -re 's,(\.[^]\[\.]+\[\])\1+,\1,g'; }

# as you already recognized, this is not a shell script's job
# it counts pathes of nodes, if it same as it te parent than it is mandatory
# eg. output: "?        2   number [].children[].foo"
function pathCount() {
    awk 'function join(a, t){for (i in a) t = t "" (t == "" ? "" : ",") "" i; return t}
    {
        pathcnt[$1]++
        pathtypecnt[$1][$2]++
    }
    END {
        for (path in pathtypecnt) {
            if (path ~ "]$") continue
            parent = gensub("\\.[^.]*$", "", 1, path)
            printf pathcnt[path]==pathcnt[parent]?"! ":"? "
            printf "%8d %8s %s\n", pathcnt[path], join(pathtypecnt[path]), path
        }
    }'
}

# minimal last resort to make it usable
function sortByPathname() { sort -k4; }

# all hopes are lost
# eg. output: "?*       1    array [].children[].children"
function markRecursions() { sed -re 's,^(.).(.*(\.[^]\[\.]+)\[\]\3$),\1*\2,' | grep --color -E '($|^.\*.*|.*,.*)'; }

main "$@"
